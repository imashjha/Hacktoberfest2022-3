class Solution {
public:
    int m, n;
    bool isvalid(int i, int j){
        if(i <0 || i>=m || j<0 || j>=n){
            return false;
        }
        return true;
    }
    
    void dfs(int i, int j, vector<vector<int>> &vis, vector<vector<int>>& board){
        vis[i][j]=1;
        board[i][j]= -1;
        if(isvalid(i-1, j) and board[i-1][j]==1 and !vis[i-1][j]){
            dfs(i-1, j, vis, board);
        }
        
        if(isvalid(i, j-1) and board[i][j-1]==1 and !vis[i][j-1]){
            dfs(i, j-1, vis, board);
        }
        
        if(isvalid(i, j+1) and board[i][j+1]==1 and !vis[i][j+1]){
            dfs(i, j+1, vis, board);
        }
        
        if(isvalid(i+1, j) and board[i+1][j]==1 and !vis[i+1][j]){
            dfs(i+1, j, vis, board);
        }
    }
    
    int numEnclaves(vector<vector<int>>& grid) {
         m= grid.size();
        n= grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n,0));
        
        for(int j=0; j<n ; j++){
            if(grid[0][j]==1){
                dfs(0, j, vis, grid);
            }
        }
        
        
        for(int i=0; i<m ; i++){
            if(grid[i][n-1]==1){
                dfs(i, n-1, vis, grid);
            }
        }
        
       for(int j=n-1; j>=0 ; j--){
            if(grid[m-1][j]==1){
                dfs(m-1, j, vis, grid);
            }
        }
    
        for(int i=m-1; i>=0 ; i--){
            if(grid[i][0]==1){
                dfs(i, 0, vis, grid);
            }
        }
        int count=0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]==1){
                    count++;
                }
            }
        }
        
        return count;
    }
};
